#include "tinytb.dtsi"
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

&kscan0 {
        compatible = "zmk,kscan-gpio-direct";
        input-gpios =
            <&gpio0 28 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,
            <&gpio0 29 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,
            <&gpio1 11 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,
            <&gpio1 12 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,
            <&gpio1 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,
            <&gpio1 14 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    };


&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 5)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 4)>,
                    <NRF_PSEL(SPIM_MISO, 0, 4)>;
        };
    };

    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 5)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 4)>,
                    <NRF_PSEL(SPIM_MISO, 0, 4)>;
            low-power-enable;
        };
    };
};

&spi0 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 3 GPIO_ACTIVE_LOW>;

    trackball: pmw3610@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio0 2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        cpi = <800>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
    };
};

    trackball_listener: trackball_listener {
        compatible = "zmk,input-listener";
        status = "okay";

        /* --- カーソルの回転（XYだけ回す） --- */
        /* 0°（基準）: 必要なら XY_SWAP を含める。今までの基準に合わせて！ */
        input-processors = <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP)>;

        /* 90°: XY入替 + X反転（あなたの既存値に合わせて） */
        rot90 {
            layers = <ROT_90>;
            input-processors = <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT)>;
        };

        /* 180°: XY入替 + X/Y反転（あなたの既存値） */
        rot180 {
            layers = <ROT_180>;
            input-processors =
                <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>;
        };

        /* 270°: Y反転（あなたの既存値） */
        rot270 {
            layers = <ROT_270>;
            input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>;
        };

        /* --- ここからスクロール化：L1〜L4 に入った時だけ XY→スクロールへ変換 --- */
        /* L1: 縦スクロール（通常） */
        scroller_v {
            layers = <L1>;
            input-processors =
                <&zip_xy_transform (0)>,               /* 軸そのまま */
                <&zip_xy_to_scroll_mapper>,            /* XY → スクロール */
                <&zip_scroll_scaler 1 10>;             /* 速度調整（任意） */
                /* <&zip_scroll_snap>;                 // 必要なら */
        };

        /* L2: 横スクロール（通常） */
        scroller_h {
            layers = <L2>;
            input-processors =
                <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP)>,  /* 軸を入替えて横へ */
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_scaler 1 10>;
        };

        /* L3: 縦スクロール（反転） */
        scroller_v_inv {
            layers = <L3>;
            input-processors =
                <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>, /* 縦を反転 */
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_scaler 1 10>;
        };

        /* L4: 横スクロール（反転） */
        scroller_h_inv {
            layers = <L4>;
            input-processors =
                <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>, /* 横+反転 */
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_scaler 1 10>;
        };
    };

};





